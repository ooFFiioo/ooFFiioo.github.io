<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zcker</title>
  
  <subtitle>技术一路伴我成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ooFFiioo.github.io/"/>
  <updated>2020-01-22T03:23:52.262Z</updated>
  <id>https://ooFFiioo.github.io/</id>
  
  <author>
    <name>张承楷</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL进阶</title>
    <link href="https://ooFFiioo.github.io/2020/01/22/03-MySQL%E7%BA%A6%E6%9D%9F/"/>
    <id>https://ooFFiioo.github.io/2020/01/22/03-MySQL约束/</id>
    <published>2020-01-21T16:00:00.000Z</published>
    <updated>2020-01-22T03:23:52.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h1><h2 id="1-排序查询"><a href="#1-排序查询" class="headerlink" title="1. 排序查询"></a>1. 排序查询</h2><ul><li><p>语法：order by 子句</p><ul><li>order by 排序字段1 排序方式1 ，  排序字段2 排序方式2…</li></ul></li><li><p>排序方式：</p><ul><li>ASC：升序，默认的。</li><li>DESC：降序。</li></ul></li><li><p>注意：</p><ul><li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</li></ul></li></ul><h2 id="2-聚合函数：将一列数据作为一个整体，进行纵向的计算。"><a href="#2-聚合函数：将一列数据作为一个整体，进行纵向的计算。" class="headerlink" title="2. 聚合函数：将一列数据作为一个整体，进行纵向的计算。"></a>2. 聚合函数：将一列数据作为一个整体，进行纵向的计算。</h2><ol><li>count：计算个数<ol><li>一般选择非空的列：主键</li><li>count(*)</li></ol></li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值</li></ol><ul><li>注意：聚合函数的计算，排除null值。<br>  解决方案：<pre><code>1. 选择不包含非空的列进行计算2. IFNULL函数</code></pre></li></ul><h2 id="3-分组查询"><a href="#3-分组查询" class="headerlink" title="3. 分组查询:"></a>3. 分组查询:</h2><ol><li><p>语法：group by 分组字段；</p></li><li><p>注意：</p><ol><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别？<ol><li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where 后不可以跟聚合函数，having可以进行聚合函数的判断。</li></ol></li></ol><p> – 按照性别分组。分别查询男、女同学的平均分</p><p> SELECT sex , AVG(math) FROM student GROUP BY sex;</p><p> <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_01.png" alt="01"></p><p> – 按照性别分组。分别查询男、女同学的平均分,人数</p><p> SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;</p><p> –  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组<br> SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;</p><p> <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_02.png" alt="02"></p><p> –  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人<br> SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;</p><p> SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</p><p> <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_03.png" alt="03"></p></li></ol><p>​            </p><h2 id="4-分页查询"><a href="#4-分页查询" class="headerlink" title="4. 分页查询"></a>4. 分页查询</h2><ol><li><p>语法：limit 开始的索引,每页查询的条数;</p></li><li><p>公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数<br> – 每页显示3条记录 </p><p> SELECT * FROM student LIMIT 0,3; – 第1页</p><p> SELECT * FROM student LIMIT 3,3; – 第2页</p><p> SELECT * FROM student LIMIT 6,3; – 第3页</p></li><li><p>limit 是一个MySQL”方言”</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_04.png" alt="04"></p></li></ol><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p> 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p></li><li><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li></ol></li></ul><ol start="4"><li>外键约束：foreign key</li></ol><ul><li><h2 id="非空约束："><a href="#非空约束：" class="headerlink" title="非空约束："></a>非空约束：</h2><p>  ​    非空约束：not null，值不能为null</p><ol><li><p>创建表时添加约束<br> CREATE TABLE stu(</p><pre><code>id INT,NAME VARCHAR(20) NOT NULL -- name为非空</code></pre><p>);</p></li><li><p>创建表完后，添加非空约束<br> ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</p></li><li><p>删除name的非空约束<br>ALTER TABLE stu MODIFY NAME VARCHAR(20);</p><p> <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_05.png" alt="05"></p></li></ol></li><li><h2 id="唯一约束："><a href="#唯一约束：" class="headerlink" title="唯一约束："></a>唯一约束：</h2></li></ul><p>​    唯一约束：unique，值不能重复</p><ol><li>创建表时，添加唯一约束<pre><code>CREATE TABLE stu(    id INT,    phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束</code></pre></li></ol><p>​        );</p><p>​    * 注意mysql中，唯一约束限定的列的值可以有多个null</p><p>​    2. 删除唯一约束</p><p>​        ALTER TABLE stu DROP INDEX phone_number;<br>​    3. 在创建表后，添加唯一约束<br>​        ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_06.png" alt="06"></p><ul><li><h2 id="主键约束：primary-key"><a href="#主键约束：primary-key" class="headerlink" title="主键约束：primary key"></a>主键约束：primary key</h2><p>  ​    主键约束：primary key</p><ol><li><p>注意：</p></li><li><p>含义：非空且唯一</p><ol start="2"><li>一张表只能有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ol></li><li><p>在创建表时，添加主键约束<br> create table stu(<br> id int primary key,– 给id添加主键约束</p><pre><code>name varchar(20)</code></pre><p> );</p></li></ol></li></ul><ol start="3"><li><p>删除主键</p><pre><code>-- 错误 alter table stu modify id int ;ALTER TABLE stu DROP PRIMARY KEY;</code></pre><p> 1.创建完表后，添加主键<br> ALTER TABLE stu MODIFY id INT PRIMARY KEY;</p><p> 2.自动增长：</p><ol><li><p>概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</p></li><li><p>在创建表时，添加主键约束，并且完成主键自增长<br>create table stu(<br> id int primary key auto_increment,– 给id添加主键约束<br> name varchar(20)<br>);</p></li><li><p>删除自动增长<br>​            ALTER TABLE stu MODIFY id INT;</p></li><li><p>添加自动增长</p><pre><code>ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</code></pre></li></ol></li></ol><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_07.png" alt="07"></p><ul><li><h2 id="外键约束："><a href="#外键约束：" class="headerlink" title="外键约束："></a>外键约束：</h2><pre><code>外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</code></pre><ol><li><p>在创建表时，可以添加外键</p><ul><li>语法：<br>  create table 表名(<pre><code>....</code></pre>  外键列<pre><code>constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</code></pre>  );</li></ul></li><li><p>删除外键<br> ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</p></li><li><p>创建表之后，添加外键<br> ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</p></li><li><p>级联操作<br> ​            1. 添加级联操作<br> ​                语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称<br> ​                        FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;<br> ​            2. 分类：<br> ​                1. 级联更新：ON UPDATE CASCADE<br> ​                2. 级联删除：ON DELETE CASCADE </p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_08.png" alt="08"></p></li></ol></li></ul><h1 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h1><h2 id="1-分类："><a href="#1-分类：" class="headerlink" title="1. 分类："></a>1. 分类：</h2><p>​    1.一对一(了解)：</p><p>​             如：人和身份证<br>​             分析：一个人只有一个身份证，一个身份证只能对应一个人</p><ol start="2"><li>一对多(多对一)：<pre><code>        如：部门和员工分析：一个部门有多个员工，一个员工只能对应一个部门</code></pre></li><li>多对多：<pre><code>如：学生和课程分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</code></pre></li></ol><h3 id="2-实现关系："><a href="#2-实现关系：" class="headerlink" title="2. 实现关系："></a>2. 实现关系：</h3><p>   ​        1. 一对多(多对一)：<br>   ​            * 如：部门和员工<br>   ​            * 实现方式：在多的一方建立外键，指向一的一方的主键。</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E5%AE%9E%E7%8E%B0.bmp" alt="一对多关系实现"></p><p>   ​        2. 多对多：<br>   ​            * 如：学生和课程<br>   ​            * 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E5%AE%9E%E7%8E%B0.bmp" alt="多对多关系实现"></p><p>   ​        3. 一对一(了解)：<br>   ​            * 如：人和身份证<br>   ​            * 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%E5%AE%9E%E7%8E%B0.bmp" alt="一对一关系实现"></p><h3 id="3-案例"><a href="#3-案例" class="headerlink" title="3. 案例"></a>3. 案例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">-- 创建旅游线路分类表 tab_category</span><br><span class="line">-- cid 旅游线路分类主键，自动增长</span><br><span class="line">-- cname 旅游线路分类名称非空，唯一，字符串 100</span><br><span class="line">CREATE TABLE tab_category (</span><br><span class="line">cid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">cname VARCHAR(100) NOT NULL UNIQUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建旅游线路表 tab_route</span><br><span class="line">/*</span><br><span class="line">rid 旅游线路主键，自动增长</span><br><span class="line">rname 旅游线路名称非空，唯一，字符串 100</span><br><span class="line">price 价格</span><br><span class="line">rdate 上架时间，日期类型</span><br><span class="line">cid 外键，所属分类</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_route(</span><br><span class="line">rid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">rname VARCHAR(100) NOT NULL UNIQUE,</span><br><span class="line">price DOUBLE,</span><br><span class="line">rdate DATE,</span><br><span class="line">cid INT,</span><br><span class="line">FOREIGN KEY (cid) REFERENCES tab_category(cid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*创建用户表 tab_user</span><br><span class="line">uid 用户主键，自增长</span><br><span class="line">username 用户名长度 100，唯一，非空</span><br><span class="line">password 密码长度 30，非空</span><br><span class="line">name 真实姓名长度 100</span><br><span class="line">birthday 生日</span><br><span class="line">sex 性别，定长字符串 1</span><br><span class="line">telephone 手机号，字符串 11</span><br><span class="line">email 邮箱，字符串长度 100</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_user (</span><br><span class="line">uid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(100) UNIQUE NOT NULL,</span><br><span class="line">PASSWORD VARCHAR(30) NOT NULL,</span><br><span class="line">NAME VARCHAR(100),</span><br><span class="line">birthday DATE,</span><br><span class="line">sex CHAR(1) DEFAULT &apos;男&apos;,</span><br><span class="line">telephone VARCHAR(11),</span><br><span class="line">email VARCHAR(100)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">创建收藏表 tab_favorite</span><br><span class="line">rid 旅游线路 id，外键</span><br><span class="line">date 收藏时间</span><br><span class="line">uid 用户 id，外键</span><br><span class="line">rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span><br><span class="line">*/</span><br><span class="line">CREATE TABLE tab_favorite (</span><br><span class="line">rid INT, -- 线路id</span><br><span class="line">DATE DATETIME,</span><br><span class="line">uid INT, -- 用户id</span><br><span class="line">-- 创建复合主键</span><br><span class="line">PRIMARY KEY(rid,uid), -- 联合主键</span><br><span class="line">FOREIGN KEY (rid) REFERENCES tab_route(rid),</span><br><span class="line">FOREIGN KEY(uid) REFERENCES tab_user(uid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_09.png" alt="09"></p><h2 id="2-数据库设计的范式"><a href="#2-数据库设计的范式" class="headerlink" title="2. 数据库设计的范式"></a>2. 数据库设计的范式</h2><p>   ​* 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</p><p>​        设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。<br>​        目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p><h3 id="分类：-1"><a href="#分类：-1" class="headerlink" title="分类："></a>分类：</h3><p>初始：</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_11.png" alt="11"></p><ol><li><p>第一范式（1NF）：每一列都是不可分割的原子数据项</p><p> <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_12.png" alt="12"></p></li><li><p>第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</p><ul><li><p>几个概念：</p><pre><code>1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A    例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。    例如：（学号，课程名称） --&gt; 分数3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。    例如：（学号，课程名称） -- &gt; 姓名4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A    例如：学号--&gt;系名，系名--&gt;系主任5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码    例如：该表中码为：（学号，课程名称）    * 主属性：码属性组中的所有属性    * 非主属性：除过码属性组的属性</code></pre></li></ul></li></ol><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_13.png" alt="13"></p><ol start="3"><li><p>第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_14.png" alt="14"></p></li></ol><h1 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h1><h2 id="1-命令行："><a href="#1-命令行：" class="headerlink" title="1. 命令行："></a>1. 命令行：</h2><ul><li>语法：<ul><li>备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件。source 文件路径</li></ol></li></ul></li></ul><h2 id="2-图形化工具："><a href="#2-图形化工具：" class="headerlink" title="2. 图形化工具："></a>2. 图形化工具：</h2><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/mysql_10.png" alt="10"></p><h1 id="PDF资料"><a href="#PDF资料" class="headerlink" title="PDF资料"></a>PDF资料</h1><p><a href="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/Javaweb03/MySQL%E7%BA%A6%E6%9D%9F%E4%B8%8E%E8%AE%BE%E8%AE%A1.pdf" target="_blank" rel="noopener">资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DQL-查询语句&quot;&gt;&lt;a href=&quot;#DQL-查询语句&quot; class=&quot;headerlink&quot; title=&quot;DQL:查询语句&quot;&gt;&lt;/a&gt;DQL:查询语句&lt;/h1&gt;&lt;h2 id=&quot;1-排序查询&quot;&gt;&lt;a href=&quot;#1-排序查询&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ooFFiioo.github.io/categories/JavaWeb/"/>
    
    
      <category term="-数据库 -JavaWeb -SQL" scheme="https://ooFFiioo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-JavaWeb-SQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础</title>
    <link href="https://ooFFiioo.github.io/2020/01/21/02-MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>https://ooFFiioo.github.io/2020/01/21/02-MySQL基础/</id>
    <published>2020-01-20T16:00:00.000Z</published>
    <updated>2020-01-22T03:36:26.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><h2 id="1-数据库的英文单词："><a href="#1-数据库的英文单词：" class="headerlink" title="1.  数据库的英文单词："></a>1.  数据库的英文单词：</h2><p>DataBase 简称 ： DB</p><h2 id="2-什么数据库？"><a href="#2-什么数据库？" class="headerlink" title="2. 什么数据库？"></a>2. 什么数据库？</h2><ul><li>用于存储和管理数据的仓库。</li></ul><h2 id="3-数据库的特点："><a href="#3-数据库的特点：" class="headerlink" title="3. 数据库的特点："></a>3. 数据库的特点：</h2><ol><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ol><h2 id="4-常见的数据库软件"><a href="#4-常见的数据库软件" class="headerlink" title="4. 常见的数据库软件"></a>4. 常见的数据库软件</h2><ul><li>参见<a href="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/MySQL%E5%9F%BA%E7%A1%80.pdf" target="_blank" rel="noopener">《MySQL基础.pdf》</a></li></ul><h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul><li>参见<a href="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/MySQL%E5%9F%BA%E7%A1%80.pdf" target="_blank" rel="noopener">《MySQL基础.pdf》</a></li></ul><h2 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2. 卸载"></a>2. 卸载</h2><ol><li>去mysql的安装目录找到my.ini文件<ul><li>复制 datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“</li></ul></li><li>卸载MySQL</li><li>删除C:/ProgramData目录下的MySQL文件夹。</li></ol><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><ul><li><p>MySQL服务启动</p><ol><li>手动。</li><li>cmd–&gt; services.msc 打开服务的窗口</li><li>使用管理员打开cmd<ul><li>net start mysql : 启动mysql的服务</li><li>net stop mysql:关闭mysql服务</li></ul></li></ol></li><li><p>MySQL登录</p><ol><li><p>mysql -uroot -p密码</p></li><li><p>mysql -hip -uroot -p连接目标的密码</p></li><li><p>mysql –host=ip –user=root –password=连接目标的密码</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_01.png" alt="01"></p></li></ol></li><li><p>MySQL退出</p><ol><li>exit</li><li>quit</li></ol></li><li><p>MySQL目录结构</p><ol><li>MySQL安装目录：basedir=”D:/develop/MySQL/“<ul><li>配置文件 my.ini</li></ul></li><li>MySQL数据目录：datadir=”C:/ProgramData/MySQL/MySQL Server 5.5/Data/“<ul><li>几个概念<ul><li>数据库：文件夹</li><li>表：文件</li><li>数据：数据</li></ul></li></ul></li></ol></li></ul><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="1-什么是SQL？"><a href="#1-什么是SQL？" class="headerlink" title="1.什么是SQL？"></a>1.什么是SQL？</h2><p>Structured Query Language：结构化查询语言<br>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><h2 id="2-SQL通用语法"><a href="#2-SQL通用语法" class="headerlink" title="2.SQL通用语法"></a>2.SQL通用语法</h2><ol><li><p>SQL 语句可以单行或多行书写，以分号结尾。</p></li><li><p>可使用空格和缩进来增强语句的可读性。</p></li><li><p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p></li><li><p>3 种注释</p><ul><li><p>单行注释: – 注释内容 或 # 注释内容(mysql 特有) </p></li><li><p>多行注释: /* 注释 */</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_02.png" alt="02"></p></li></ul></li><li><p>SQL分类<br> 1) <strong>DDL(Data Definition Language)数据定义语言</strong></p><pre><code>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</code></pre><p> 2) <strong>DML(Data Manipulation Language)数据操作语言</strong></p><pre><code>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</code></pre><p> 3) <strong>DQL(Data Query Language)数据查询语言</strong></p><pre><code>用来查询数据库中表的记录(数据)。关键字：select, where 等</code></pre><p> 4) <strong>DCL(Data Control Language)数据控制语言(了解)</strong></p><pre><code>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</code></pre></li></ol><h2 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h2><h2 id="1-操作数据库：CRUD"><a href="#1-操作数据库：CRUD" class="headerlink" title="1. 操作数据库：CRUD"></a>1. 操作数据库：CRUD</h2><h3 id="1-C-Create-创建"><a href="#1-C-Create-创建" class="headerlink" title="1. C(Create):创建"></a>1. C(Create):创建</h3><ul><li><p>创建数据库：</p><ul><li>create database 数据库名称;</li></ul></li><li><p>创建数据库，判断不存在，再创建：</p><ul><li>create database if not exists 数据库名称;</li></ul></li><li><p>创建数据库，并指定字符集</p><ul><li><p>create database 数据库名称 character set 字符集名;</p><pre><code>* 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk* create database if not exists db4 character set gbk;  ![03](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_03.png)</code></pre><h3 id="2-R-Retrieve-：查询"><a href="#2-R-Retrieve-：查询" class="headerlink" title="2. R(Retrieve)：查询"></a>2. R(Retrieve)：查询</h3></li><li><p>查询所有数据库的名称:</p><ul><li>show databases;</li></ul></li><li><p>查询某个数据库的字符集:查询某个数据库的创建语句</p><ul><li><p>show create database 数据库名称;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_04.png" alt="04"></p></li></ul><h3 id="3-U-Update-修改"><a href="#3-U-Update-修改" class="headerlink" title="3. U(Update):修改"></a>3. U(Update):修改</h3></li><li><p>修改数据库的字符集</p><ul><li><p>alter database 数据库名称 character set 字符集名称;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_05.png" alt="05"></p></li></ul><h3 id="4-D-Delete-删除"><a href="#4-D-Delete-删除" class="headerlink" title="4. D(Delete):删除"></a>4. D(Delete):删除</h3></li><li><p>删除数据库</p><ul><li>drop database 数据库名称;</li></ul></li><li><p>判断数据库存在，存在再删除</p><ul><li><p>drop database if exists 数据库名称;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_06.png" alt="06"></p></li></ul><h3 id="5-使用数据库"><a href="#5-使用数据库" class="headerlink" title="5. 使用数据库"></a>5. 使用数据库</h3></li><li><p>查询当前正在使用的数据库名称</p><ul><li>select database();</li></ul></li><li><p>使用数据库</p><ul><li><p>use 数据库名称;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_07.png" alt="07"></p></li></ul></li></ul></li></ul><h2 id="2-操作表"><a href="#2-操作表" class="headerlink" title="2. 操作表"></a>2. 操作表</h2><h3 id="1-C-Create-创建-1"><a href="#1-C-Create-创建-1" class="headerlink" title="1. C(Create):创建"></a>1. C(Create):创建</h3><ol><li><p>语法：<br> create table 表名(</p><pre><code>列名1 数据类型1,列名2 数据类型2,....列名n 数据类型n</code></pre><p> );</p><ul><li><p>注意：最后一列，不需要加逗号（,）</p></li><li><p>数据库类型：</p><ol><li><p>int：整数类型</p><ul><li>age int,</li></ul></li><li><p>double:小数类型</p><ul><li>score double(5,2)</li></ul></li><li><p>date:日期，只包含年月日，yyyy-MM-dd</p></li><li><p>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    </p><ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li><p>varchar：字符串</p><ul><li>name varchar(20):姓名最大20个字符</li><li>zhangsan 8个字符  张三 2个字符</li></ul></li></ol></li></ul></li></ol><ul><li><p>创建表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">id int,</span><br><span class="line">name varchar(32),</span><br><span class="line">age int ,</span><br><span class="line">score double(4,1),</span><br><span class="line">birthday date,</span><br><span class="line">insert_time timestamp</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>复制表：</p><ul><li><p>create table 表名 like 被复制的表名;          </p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_08.png" alt="08"></p></li></ul></li></ul><h3 id="2-R-Retrieve-：查询-1"><a href="#2-R-Retrieve-：查询-1" class="headerlink" title="2. R(Retrieve)：查询"></a>2. R(Retrieve)：查询</h3><ul><li><p>查询某个数据库中所有的表名称</p><ul><li>show tables;</li></ul></li><li><p>查询表结构</p><ul><li><p>desc 表名;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_09.png" alt="09"></p></li></ul></li></ul><h3 id="3-U-Update-修改-1"><a href="#3-U-Update-修改-1" class="headerlink" title="3. U(Update):修改"></a>3. U(Update):修改</h3><ol><li><p>修改表名<br> alter table 表名 rename to 新的表名;</p></li><li><p>修改表的字符集<br> alter table 表名 character set 字符集名称;</p></li><li><p>添加一列<br> alter table 表名 add 列名 数据类型;</p></li><li><p>修改列名称 类型<br> alter table 表名 change 列名 新列别 新数据类型;<br> alter table 表名 modify 列名 新数据类型;</p></li><li><p>删除列<br> alter table 表名 drop 列名;</p><p> <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_10.png" alt="10"></p></li></ol><h3 id="4-D-Delete-删除-1"><a href="#4-D-Delete-删除-1" class="headerlink" title="4. D(Delete):删除"></a>4. D(Delete):删除</h3><ul><li><p>drop table 表名;</p></li><li><p>drop table  if exists 表名 ;</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_11.png" alt="11"></p></li><li><p>客户端图形化工具：SQLYog</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_17.png" alt="17"></p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_12.png" alt="12"></p></li></ul><h2 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h2><h3 id="1-添加数据："><a href="#1-添加数据：" class="headerlink" title="1. 添加数据："></a>1. 添加数据：</h3><ul><li><p>语法：</p><ul><li>insert into 表名(列名1,列名2,…列名n) values(值1,值2,…值n);</li></ul></li><li><p>注意：</p><ol><li><p>列名和值要一一对应。</p></li><li><p>如果表名后，不定义列名，则默认给所有列添加值<br> insert into 表名 values(值1,值2,…值n);</p></li><li><p>除了数字类型，其他类型需要使用引号(单双都可以)引起来</p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_13.png" alt="13" style="zoom: 67%;"></li></ol></li></ul><h3 id="2-删除数据："><a href="#2-删除数据：" class="headerlink" title="2. 删除数据："></a>2. 删除数据：</h3><ul><li><p>语法：</p><ul><li>delete from 表名 [where 条件]</li></ul></li><li><p>注意：</p><ol><li><p>如果不加条件，则删除表中所有记录。</p></li><li><p>如果要删除所有记录</p><ol><li><p>delete from 表名; – 不推荐使用。有多少条记录就会执行多少次删除操作</p></li><li><p>TRUNCATE TABLE 表名; – 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_15.png" alt="15" style="zoom:67%;"></li></ol></li></ol></li></ul><h3 id="3-修改数据："><a href="#3-修改数据：" class="headerlink" title="3. 修改数据："></a>3. 修改数据：</h3><ul><li><p>语法：</p><ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2,… [where 条件];</li></ul></li><li><p>注意：</p><ol><li>如果不加任何条件，则会将表中所有记录全部修改。</li></ol></li></ul><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_14.png" alt="14" style="zoom:67%;"><h2 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h2><ul><li>select * from 表名;</li></ul><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><p><strong>select</strong><br>    <strong>字段列表</strong><br><strong>from</strong><br>    <strong>表名列表</strong><br><strong>where</strong><br>    <strong>条件列表</strong><br><strong>group by</strong><br>    <strong>分组字段</strong><br><strong>having</strong><br>    <strong>分组之后的条件</strong><br><strong>order by</strong><br>    <strong>排序</strong><br><strong>limit</strong><br>    <strong>分页限定</strong></p><h3 id="2-基础查询"><a href="#2-基础查询" class="headerlink" title="2. 基础查询"></a>2. 基础查询</h3><ol><li>多个字段的查询<br> select 字段名1，字段名2… from 表名；<ul><li>注意：<ul><li>如果查询所有字段，则可以使用*来替代字段列表。</li></ul></li></ul></li><li>去除重复：<ul><li>distinct</li></ul></li><li>计算列<ul><li>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</li><li>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null<ul><li>表达式1：哪个字段需要判断是否为null</li><li>如果该字段为null后的替换值。</li></ul></li></ul></li><li>起别名：<ul><li>as：as也可以省略</li></ul></li></ol><h3 id="3-条件查询"><a href="#3-条件查询" class="headerlink" title="3. 条件查询"></a>3. 条件查询</h3><ol><li><p>where子句后跟条件</p></li><li><p>运算符</p><ul><li><p>&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p></li><li><p>BETWEEN…AND  </p></li><li><p>IN( 集合) </p></li><li><p>LIKE：模糊查询</p><ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li><p>IS NULL  </p></li></ul></li></ol><ul><li>and  或 &amp;&amp;</li></ul><pre><code>or  或 || * not  或 !    -- 查询年龄大于20岁    SELECT * FROM student WHERE age &gt; 20;    SELECT * FROM student WHERE age &gt;= 20;    ![18](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_18.png)    -- 查询年龄等于20岁    SELECT * FROM student WHERE age = 20;    -- 查询年龄不等于20岁    SELECT * FROM student WHERE age != 20;    SELECT * FROM student WHERE age &lt;&gt; 20;    ![19](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_19.png)    -- 查询年龄大于等于20 小于等于30    SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;    SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;    SELECT * FROM student WHERE age BETWEEN 20 AND 30;    ![20](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_20.png)    -- 查询年龄22岁，18岁，25岁的信息    SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25    SELECT * FROM student WHERE age IN (22,18,25);    ![21](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_21.png)    -- 查询英语成绩为null    **SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断**    SELECT * FROM student WHERE english IS NULL;    ![22](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_22.png)    -- 查询英语成绩不为null    SELECT * FROM student WHERE english  IS NOT NULL;​            -- 查询姓马的有哪些？ like​            SELECT * FROM student WHERE NAME LIKE &apos;马%&apos;;![23](https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb02/mysql_23.png)​            -- 查询姓名第二个字是化的人​            SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;​            -- 查询姓名是3个字的人​            SELECT * FROM student WHERE NAME LIKE &apos;___&apos;;​            -- 查询姓名中包含德的人​            SELECT * FROM student WHERE NAME LIKE &apos;%德%&apos;;</code></pre><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库的基本概念&quot;&gt;&lt;a href=&quot;#数据库的基本概念&quot; class=&quot;headerlink&quot; title=&quot;数据库的基本概念&quot;&gt;&lt;/a&gt;数据库的基本概念&lt;/h1&gt;&lt;h2 id=&quot;1-数据库的英文单词：&quot;&gt;&lt;a href=&quot;#1-数据库的英文单词：&quot; class
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ooFFiioo.github.io/categories/JavaWeb/"/>
    
    
      <category term="-数据库 -JavaWeb -SQL" scheme="https://ooFFiioo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93-JavaWeb-SQL/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb测试，反射，注解</title>
    <link href="https://ooFFiioo.github.io/2020/01/16/01-java%E7%9A%84%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%8F%8D%E5%B0%84%EF%BC%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>https://ooFFiioo.github.io/2020/01/16/01-java的测试，反射，注解/</id>
    <published>2020-01-15T16:00:00.000Z</published>
    <updated>2020-01-18T02:14:42.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junit单元测试："><a href="#Junit单元测试：" class="headerlink" title="Junit单元测试："></a>Junit单元测试：</h1><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb01/JavaWeb_day01%E6%B5%8B%E8%AF%95%E5%88%86%E7%B1%BB.bmp" alt="测试分类"></p><ul><li><h2 id="测试分类："><a href="#测试分类：" class="headerlink" title="测试分类："></a>测试分类：</h2></li></ul><ol><li>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</li><li>白盒测试：需要写代码的。关注程序具体的执行流程。</li></ol><ul><li><h2 id="Junit使用：白盒测试"><a href="#Junit使用：白盒测试" class="headerlink" title="Junit使用：白盒测试"></a>Junit使用：白盒测试</h2><ul><li><p>步骤：</p><ol><li><p>定义一个测试类(测试用例)</p><ul><li>建议：<ul><li>测试类名：被测试的类名Test        CalculatorTest</li></ul></li><li>包名：xxx.xxx.xx.test        cn.itcast.test</li></ul></li><li><p>定义测试方法：可以独立运行</p><ul><li>建议：<ul><li>方法名：test测试的方法名        testAdd()  </li><li>返回值：void</li></ul></li><li>参数列表：空参</li></ul></li><li><p>给方法加@Test</p></li><li><p>导入junit依赖环境</p></li></ol></li></ul></li></ul><ul><li><h2 id="判定结果："><a href="#判定结果：" class="headerlink" title="判定结果："></a>判定结果：</h2><ul><li>红色：失败</li><li>绿色：成功</li><li>一般我们会使用断言操作来处理结果<ul><li>Assert.assertEquals(期望的结果,运算的结果);</li></ul></li></ul></li><li><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><ul><li><p>@Before:</p><ul><li>修饰的方法会在测试方法之前被自动执行</li></ul></li><li><p>@After:</p><ul><li><p>修饰的方法会在测试方法执行之后自动被执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器类Junit.Calculator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="comment">//int i = 3/0;</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span> <span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类Junit.CalculatorTest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">       <span class="comment">/* int result = c.add(1, 2);</span></span><br><span class="line"><span class="comment">        System.out.println(result);*/</span></span><br><span class="line">        <span class="keyword">int</span> result = c.sub(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Test.CalculatorTest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法：</span></span><br><span class="line"><span class="comment">     *  用于资源申请，所有测试方法在执行之前都会先执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源方法：</span></span><br><span class="line"><span class="comment">     *  在所有测试方法执行完后，都会自动执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"close..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试add方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// System.out.println("我被执行了");</span></span><br><span class="line">        <span class="comment">//1.创建计算器对象</span></span><br><span class="line">        System.out.println(<span class="string">"testAdd..."</span>);</span><br><span class="line">        Calculator c  = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//2.调用add方法</span></span><br><span class="line">        <span class="keyword">int</span> result = c.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//System.out.println(result);</span></span><br><span class="line">        <span class="comment">//3.断言  我断言这个结果是3</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建计算器对象</span></span><br><span class="line">        Calculator c  = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="keyword">int</span> result = c.sub(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"testSub...."</span>);</span><br><span class="line">        Assert.assertEquals(-<span class="number">1</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">add的结果：</span><br><span class="line">init...</span><br><span class="line">testAdd...</span><br><span class="line">close...</span><br><span class="line"></span><br><span class="line">java.lang.AssertionError: </span><br><span class="line">期望:<span class="number">3</span></span><br><span class="line">实际 :-<span class="number">1</span></span><br><span class="line">&lt;点击查看差异&gt;</span><br><span class="line">at org.junit.Assert.fail(Assert.java:<span class="number">88</span>)</span><br><span class="line">at org.junit.Assert.failNotEquals(Assert.java:<span class="number">834</span>)</span><br><span class="line">at org.junit.Assert.assertEquals(Assert.java:<span class="number">645</span>)</span><br><span class="line">at org.junit.Assert.assertEquals(Assert.java:<span class="number">631</span>)</span><br><span class="line">at cn.itcast.test.CalculatorTest.testAdd(CalculatorTest.java:<span class="number">46</span>)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">   </span><br><span class="line">分析：断言错误，但是<span class="meta">@before</span>以及<span class="meta">@after</span>还是可以运行</span><br><span class="line"></span><br><span class="line">sub的结果：</span><br><span class="line">init...</span><br><span class="line">testSub....</span><br><span class="line">close...</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h1 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>框架：</p><p>半成品软件。可以在框架的基础上进行软件开发，简化编码</p></li><li><p>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li>好处：<ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol></li></ul></li></ul><ul><li><h2 id="获取Class对象的方式："><a href="#获取Class对象的方式：" class="headerlink" title="获取Class对象的方式："></a>获取Class对象的方式：</h2><ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。</li></ol><ul><li><p>多用于对象的获取字节码的方式</p></li><li><p>结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取Class对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        获取Class对象的方式：</span></span><br><span class="line"><span class="comment">            1. Class.forName("全类名")：将字节码文件加载进内存，返回Class对象</span></span><br><span class="line"><span class="comment">            2. 类名.class：通过类名的属性class获取</span></span><br><span class="line"><span class="comment">            3. 对象.getClass()：getClass()方法在Object类中定义着。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.Class.forName("全类名")</span></span><br><span class="line">        Class cls1 = Class.forName(<span class="string">"cn.itcast.domain.Person"</span>);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        <span class="comment">//2.类名.class</span></span><br><span class="line">        Class cls2 = Person.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        <span class="comment">//3.对象.getClass()</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3 = p.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line">        <span class="comment">//== 比较三个对象</span></span><br><span class="line">        System.out.println(cls1 == cls2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(cls1 == cls3);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//相同</span></span><br><span class="line">        Class c = Student.class;</span><br><span class="line">        System.out.println(c == cls1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cn</span>.<span class="title">itcast</span>.<span class="title">domain</span>.<span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">cn</span>.<span class="title">itcast</span>.<span class="title">domain</span>.<span class="title">Person</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">cn</span>.<span class="title">itcast</span>.<span class="title">domain</span>.<span class="title">Person</span></span></span><br><span class="line"><span class="class">//获取3种方法</span></span><br><span class="line"><span class="class"><span class="title">true</span></span></span><br><span class="line"><span class="class"><span class="title">true</span></span></span><br><span class="line"><span class="class"><span class="title">false</span></span></span><br></pre></td></tr></table></figure><ul><li><h2 id="Class对象功能："><a href="#Class对象功能：" class="headerlink" title="Class对象功能："></a>Class对象功能：</h2><p>  <img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/javaWeb01/JavaWeb_day01Java%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.bmp" alt="代码的三个阶段"></p><ul><li><p>获取功能：</p><ol><li>获取成员变量们<ul><li>Field[] getFields() ：获取所有public修饰的成员变量</li></ul></li></ol><ul><li><p>Field getField(String name)   获取指定名称的 public修饰的成员变量</p><ul><li>Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符</li><li>Field getDeclaredField(String name)  </li></ul></li></ul><ol start="2"><li>获取构造方法们<ul><li>Constructor&lt;?&gt;[] getConstructors()  </li></ul></li></ol><ul><li><p>Constructor<t> getConstructor(类&lt;?&gt;… parameterTypes)  </t></p><ul><li>Constructor<t> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)  </t></li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()  </li></ul></li></ul><ol start="3"><li>获取成员方法们：<ul><li>Method[] getMethods()  </li></ul></li></ol><ul><li><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p><ul><li>Method[] getDeclaredMethods()  </li></ul></li><li><p>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)  </p></li></ul><ol start="4"><li>获取全类名    </li></ol><ul><li>String getName()  </li></ul></li></ul></li></ul><pre><code>* ## Field：成员变量    * 操作：        1. 设置值            * void set(Object obj, Object value)          2. 获取值        * get(Object obj)         3. 忽略访问权限修饰符的安全检查        * setAccessible(true):暴力反射    * ## Constructor:构造方法        * 创建对象：        * T newInstance(Object... initargs)          * 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法    * ## Method：方法对象        * 执行方法：        * Object invoke(Object obj, Object... args)          * 获取方法名称：            * String getName:获取方法名</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*用来测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String a;</span><br><span class="line">    <span class="keyword">protected</span> String b;</span><br><span class="line">    String c;</span><br><span class="line">    <span class="keyword">private</span> String d;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", a='"</span> + a + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", b='"</span> + b + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", c='"</span> + c + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", d='"</span> + d + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat..."</span>+food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"sleep..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//0.获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">             1. 获取成员变量们</span></span><br><span class="line"><span class="comment">                 * Field[] getFields()</span></span><br><span class="line"><span class="comment">                 * Field getField(String name)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                 * Field[] getDeclaredFields()</span></span><br><span class="line"><span class="comment">                 * Field getDeclaredField(String name)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1.Field[] getFields()获取所有public修饰的成员变量</span></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">        <span class="comment">//2.Field getField(String name)</span></span><br><span class="line">        Field a = personClass.getField(<span class="string">"a"</span>);</span><br><span class="line">        <span class="comment">//获取成员变量a 的值</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Object value = a.get(p);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//设置a的值</span></span><br><span class="line">        a.set(p, <span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//Field[] getDeclaredFields()：获取所有的成员变量，不考虑修饰符</span></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Field getDeclaredField(String name)</span></span><br><span class="line">        Field d = personClass.getDeclaredField(<span class="string">"d"</span>);</span><br><span class="line">        <span class="comment">//忽略访问权限修饰符的安全检查</span></span><br><span class="line">        d.setAccessible(<span class="keyword">true</span>);<span class="comment">//暴力反射</span></span><br><span class="line">        Object value2 = d.get(p);</span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="keyword">public</span> java.lang.String cn.itcast.domain.Person.a</span><br><span class="line">------------</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">Person&#123;name=<span class="string">'null'</span>, age=<span class="number">0</span>, a=<span class="string">'张三'</span>, b=<span class="string">'null'</span>, c=<span class="string">'null'</span>, d=<span class="string">'null'</span>&#125;</span><br><span class="line">===================</span><br><span class="line"><span class="keyword">private</span> java.lang.String cn.itcast.domain.Person.name</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cn.itcast.domain.Person.age</span><br><span class="line"><span class="keyword">public</span> java.lang.String cn.itcast.domain.Person.a</span><br><span class="line"><span class="keyword">protected</span> java.lang.String cn.itcast.domain.Person.b</span><br><span class="line">java.lang.String cn.itcast.domain.Person.c</span><br><span class="line"><span class="keyword">private</span> java.lang.String cn.itcast.domain.Person.d</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//0.获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            2. 获取构造方法们</span></span><br><span class="line"><span class="comment">                 * Constructor&lt;?&gt;[] getConstructors()</span></span><br><span class="line"><span class="comment">                 * Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                 * Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">                 * Constructor&lt;?&gt;[] getDeclaredConstructors()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        Constructor constructor = personClass.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person = constructor.newInstance(<span class="string">"张三"</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">        Constructor constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object person1 = constructor1.newInstance();</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">        Object o = personClass.newInstance();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">        <span class="comment">//constructor1.setAccessible(true);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="keyword">public</span> cn.itcast.domain.Person(java.lang.String,<span class="keyword">int</span>)</span><br><span class="line">Person&#123;name=<span class="string">'张三'</span>, age=<span class="number">23</span>, a=<span class="string">'null'</span>, b=<span class="string">'null'</span>, c=<span class="string">'null'</span>, d=<span class="string">'null'</span>&#125;</span><br><span class="line">----------</span><br><span class="line"><span class="keyword">public</span> cn.itcast.domain.Person()</span><br><span class="line">Person&#123;name=<span class="string">'null'</span>, age=<span class="number">0</span>, a=<span class="string">'null'</span>, b=<span class="string">'null'</span>, c=<span class="string">'null'</span>, d=<span class="string">'null'</span>&#125;</span><br><span class="line">Person&#123;name=<span class="string">'null'</span>, age=<span class="number">0</span>, a=<span class="string">'null'</span>, b=<span class="string">'null'</span>, c=<span class="string">'null'</span>, d=<span class="string">'null'</span>&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//0.获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          3. 获取成员方法们：</span></span><br><span class="line"><span class="comment">             * Method[] getMethods()</span></span><br><span class="line"><span class="comment">             * Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             * Method[] getDeclaredMethods()</span></span><br><span class="line"><span class="comment">             * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//获取指定名称的方法</span></span><br><span class="line">        Method eat_method = personClass.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        eat_method.invoke(p);</span><br><span class="line">        Method eat_method2 = personClass.getMethod(<span class="string">"eat"</span>, String.class);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        eat_method2.invoke(p,<span class="string">"饭"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        <span class="comment">//获取所有public修饰的方法</span></span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            <span class="comment">//method.setAccessible(true);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取类名</span></span><br><span class="line">        String className = personClass.getName();</span><br><span class="line">        System.out.println(className);<span class="comment">//cn.itcast.domain.Person</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">eat...</span><br><span class="line">eat...饭</span><br><span class="line">-----------------</span><br><span class="line"><span class="keyword">public</span> java.lang.String cn.itcast.domain.Person.toString()</span><br><span class="line">toString</span><br><span class="line"><span class="keyword">public</span> java.lang.String cn.itcast.domain.Person.getName()</span><br><span class="line">getName</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> cn.itcast.domain.Person.setName(java.lang.String)</span><br><span class="line">setName</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> cn.itcast.domain.Person.setAge(<span class="keyword">int</span>)</span><br><span class="line">setAge</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> cn.itcast.domain.Person.eat()</span><br><span class="line">eat</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> cn.itcast.domain.Person.eat(java.lang.String)</span><br><span class="line">eat</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> cn.itcast.domain.Person.getAge()</span><br><span class="line">getAge</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">wait</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">wait</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line">wait</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.Object.equals(java.lang.Object)</span><br><span class="line">equals</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> java.lang.Object.hashCode()</span><br><span class="line">hashCode</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line">getClass</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line">notify</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line">notifyAll</span><br><span class="line">cn.itcast.domain.Person</span><br></pre></td></tr></table></figure><ul><li><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><ul><li>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<ul><li>实现：<ol><li>配置文件</li><li>反射</li></ol></li><li>步骤：<ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 框架类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line">        <span class="comment">//1.加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录下的配置文件</span></span><br><span class="line">        ClassLoader classLoader = ReflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//2.获取配置文件中定义的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">sleep...</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">pro.properties内容：</span><br><span class="line">className=cn.itcast.domain.Student</span><br><span class="line">methodName=sleep</span><br></pre></td></tr></table></figure><h1 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h1><ul><li><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>说明程序的。给计算机看的</p></li><li><h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><p>用文字描述程序的。给程序员看的</p></li><li><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p></li><li><h2 id="概念描述："><a href="#概念描述：" class="headerlink" title="概念描述："></a>概念描述：</h2><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></li></ul><ul><li><h2 id="作用分类："><a href="#作用分类：" class="headerlink" title="作用分类："></a>作用分类：</h2><p>  ①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br>  ②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>  ③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</p></li><li><h2 id="JDK中预定义的一些注解"><a href="#JDK中预定义的一些注解" class="headerlink" title="JDK中预定义的一些注解"></a>JDK中预定义的一些注解</h2><ul><li><p>@Override    ：检测被该注解标注的方法是否是继承自父类(接口)的</p></li><li><p>@Deprecated：该注解标注的内容，表示已过时</p></li><li><p>@SuppressWarnings：压制警告</p></li><li><p>一般传递参数all  @SuppressWarnings(“all”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//有缺陷</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//替代show1方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        show1();</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>  元注解<br>  public @interface 注解名称{</p><pre><code>属性列表;</code></pre><p>}</p></li><li><h3 id="本质：注解本质上就是一个接口，该接口默认继承Annotation接口"><a href="#本质：注解本质上就是一个接口，该接口默认继承Annotation接口" class="headerlink" title="本质：注解本质上就是一个接口，该接口默认继承Annotation接口"></a>本质：注解本质上就是一个接口，该接口默认继承Annotation接口</h3></li><li><p>public interface MyAnno extends java.lang.annotation.Annotation {}</p></li><li><h3 id="属性：接口中的抽象方法"><a href="#属性：接口中的抽象方法" class="headerlink" title="属性：接口中的抽象方法"></a>属性：接口中的抽象方法</h3><ul><li><p>要求：</p><ol><li>属性的返回值类型有下列取值<ul><li>基本数据类型</li><li>String</li></ul></li></ol><ul><li>枚举<ul><li>注解</li></ul></li><li>以上类型的数组</li></ul><ol start="2"><li>定义了属性，在使用时需要给属性赋值<ol><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li></ol></li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ol></li></ul></li><li><h3 id="元注解：用于描述注解的注解"><a href="#元注解：用于描述注解的注解" class="headerlink" title="元注解：用于描述注解的注解"></a>元注解：用于描述注解的注解</h3><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li>@Documented：描述注解是否被抽取到api文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">源码：</span><br><span class="line"><span class="meta">@Target</span>：</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">分析：target的状态是因为ElementType的穷举</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Method declaration */</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Constructor declaration */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local variable declaration */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Annotation type declaration */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Package declaration */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Type parameter declaration</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use of a type</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="meta">@Retention</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Retention &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the retention policy.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the retention policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">RetentionPolicy <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">分析：同理</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be discarded by the compiler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler</span></span><br><span class="line"><span class="comment">     * but need not be retained by the VM at run time.  This is the default</span></span><br><span class="line"><span class="comment">     * behavior.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Annotations are to be recorded in the class file by the compiler and</span></span><br><span class="line"><span class="comment">     * retained by the VM at run time, so they may be read reflectively.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> java.lang.reflect.AnnotatedElement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"> <span class="meta">@Inherited</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inherited &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="在程序使用-解析-注解：获取注解中定义的属性值"><a href="#在程序使用-解析-注解：获取注解中定义的属性值" class="headerlink" title="在程序使用(解析)注解：获取注解中定义的属性值"></a>在程序使用(解析)注解：获取注解中定义的属性值</h3><ol><li>获取注解定义的位置的对象  （Class，Method,Field）</li><li>获取指定的注解<ul><li>getAnnotation(Class)<br>//其实就是在内存中生成了一个该注解接口的子类实现对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProImpl</span> <span class="keyword">implements</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">className</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"cn.itcast.annotation.Demo1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">methodName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"show"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><p>​        3.调用注解中的抽象方法获取配置的属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo1...show..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo2...show..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解Pro</span></span><br><span class="line"><span class="comment"> * 描述需要执行的类名，和方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 框架类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Pro</span>(className = <span class="string">"cn.itcast.annotation.Demo1"</span>,methodName = <span class="string">"show"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            前提：不能改变该类的任何代码。可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//1.解析注解</span></span><br><span class="line">        <span class="comment">//1.1获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;ReflectTest&gt; reflectTestClass = ReflectTest.class;</span><br><span class="line">        <span class="comment">//2.获取上边的注解对象</span></span><br><span class="line">        <span class="comment">//其实就是在内存中生成了一个该注解接口的子类实现对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public class ProImpl implements Pro&#123;</span></span><br><span class="line"><span class="comment">                public String className()&#123;</span></span><br><span class="line"><span class="comment">                    return "cn.itcast.annotation.Demo1";</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                public String methodName()&#123;</span></span><br><span class="line"><span class="comment">                    return "show";</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        Pro an = reflectTestClass.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//3.调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String className = an.className();</span><br><span class="line">        String methodName = an.methodName();</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        System.out.println(methodName);</span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">cn.itcast.annotation.Demo1</span><br><span class="line">show</span><br><span class="line">demo1...show...</span><br></pre></td></tr></table></figure><ul><li><h2 id="案例：简单的测试框架"><a href="#案例：简单的测试框架" class="headerlink" title="案例：简单的测试框架"></a>案例：简单的测试框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将计算机类报的错误生成TXT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="keyword">null</span>;</span><br><span class="line">        str.toString();</span><br><span class="line">        System.out.println(<span class="string">"1 + 0 ="</span> + (<span class="number">1</span> + <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 - 0 ="</span> + (<span class="number">1</span> - <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 * 0 ="</span> + (<span class="number">1</span> * <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1 / 0 ="</span> + (<span class="number">1</span> / <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"永无bug..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的测试框架</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 当主方法执行后，会自动自行被检测的所有方法(加了Check注解的方法)，判断方法是否有异常，记录到文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCheck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建计算器对象</span></span><br><span class="line">        Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//2.获取字节码文件对象</span></span><br><span class="line">        Class cls = c.getClass();</span><br><span class="line">        <span class="comment">//3.获取所有方法</span></span><br><span class="line">        Method[] methods = cls.getMethods();</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;<span class="comment">//出现异常的次数</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"bug.txt"</span>));</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//4.判断方法上是否有Check注解</span></span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(Check.class))&#123;</span><br><span class="line">                <span class="comment">//5.有，执行</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(c);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//6.捕获异常</span></span><br><span class="line">                    <span class="comment">//记录到文件中</span></span><br><span class="line">                    number ++;</span><br><span class="line">                    bw.write(method.getName()+ <span class="string">" 方法出异常了"</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">"异常的名称:"</span> + e.getCause().getClass().getSimpleName());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">"异常的原因:"</span>+e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">"--------------------------"</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bw.write(<span class="string">"本次测试一共出现 "</span>+number+<span class="string">" 次异常"</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line">生成的TXT：</span><br><span class="line">add 方法出异常了</span><br><span class="line">异常的名称:NullPointerException</span><br><span class="line">异常的原因:<span class="keyword">null</span></span><br><span class="line">--------------------------</span><br><span class="line">div 方法出异常了</span><br><span class="line">异常的名称:ArithmeticException</span><br><span class="line">异常的原因:/ by zero</span><br><span class="line">--------------------------</span><br><span class="line">本次测试一共出现 <span class="number">2</span> 次异常</span><br></pre></td></tr></table></figure></li></ul><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><blockquote><p>1.以后大多数时候，我们会使用注解，而不是自定义注解</p><ol start="2"><li>注解给谁用？<br> 1.编译器    2.给解析程序用</li></ol><p>3.注解不是程序的一部分，可以理解为注解就是一个标签</p></blockquote><h2 id="代码资源："><a href="#代码资源：" class="headerlink" title="代码资源："></a>代码资源：</h2><p><a href="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/zip/day01_%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA.rar" target="_blank" rel="noopener">资料</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Junit单元测试：&quot;&gt;&lt;a href=&quot;#Junit单元测试：&quot; class=&quot;headerlink&quot; title=&quot;Junit单元测试：&quot;&gt;&lt;/a&gt;Junit单元测试：&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://zck-blog-image-12597
      
    
    </summary>
    
      <category term="JavaWeb" scheme="https://ooFFiioo.github.io/categories/JavaWeb/"/>
    
    
      <category term="-测试 -JavaWeb -反射 -注解" scheme="https://ooFFiioo.github.io/tags/%E6%B5%8B%E8%AF%95-JavaWeb-%E5%8F%8D%E5%B0%84-%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java队列</title>
    <link href="https://ooFFiioo.github.io/2020/01/05/java%E9%98%9F%E5%88%97/"/>
    <id>https://ooFFiioo.github.io/2020/01/05/java队列/</id>
    <published>2020-01-04T16:00:00.000Z</published>
    <updated>2020-01-18T02:00:46.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java队列"><a href="#Java队列" class="headerlink" title="Java队列"></a>Java队列</h4><p>队列的两端都”开口”，要求数据只能从一端进，从另一端出，且数据的进出要遵循 “先进先出” 的原则，即最先进队列的数据元素，同样要最先出队列。</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/%E9%98%9F%E5%88%97/day03_01.gif" alt="队列"></p><p>其中，对于队列中的某一数组来说具有font和back还有个数currentsize，操作enquene是在rear插入一个元素，dequene是删除并返回在font的一个元素，不浪费空间的方法即为循环队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">接口实现：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *项目名: JavaTest</span></span><br><span class="line"><span class="comment"> *文件名: Quene</span></span><br><span class="line"><span class="comment"> *创建者: ZhangChengkai</span></span><br><span class="line"><span class="comment"> *创建时间:2020/1/4 22:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Quene</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队列长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * data 入队,添加成功返回true,否则返回false,可扩容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * offer 方法可插入一个元素,这与add 方法不同，</span></span><br><span class="line"><span class="comment">     * 该方法只能通过抛出未经检查的异常使添加元素失败。</span></span><br><span class="line"><span class="comment">     * 而不是出现异常的情况，例如在容量固定（有界）的队列中</span></span><br><span class="line"><span class="comment">     * NullPointerException:data==null时抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T data)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队头元素,不执行删除操作,若队列为空,返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">peek</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队头元素,不执行删除操作,若队列为空,抛出异常:NoSuchElementException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">element</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队,执行删除操作,返回队头元素,若队列为空,返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">poll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队,执行删除操作,若队列为空,抛出异常:NoSuchElementException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearQueue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">顺序队列：</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *项目名: JavaTest</span></span><br><span class="line"><span class="comment"> *文件名: ArrayQuene</span></span><br><span class="line"><span class="comment"> *创建者: ZhangChengkai</span></span><br><span class="line"><span class="comment"> *创建时间:2020/1/5 10:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQuene</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Quene</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> T element[];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQuene</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        element = (T[]) <span class="keyword">new</span> Object[<span class="number">1000</span>];</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQuene</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        element = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        front = rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队列长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断队列是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * data 入队,添加成功返回true,否则返回false,可扩容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.front == (<span class="keyword">this</span>.rear + <span class="number">1</span>) % <span class="keyword">this</span>.element.length) &#123;</span><br><span class="line">            dilatation(element.length * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        element[<span class="keyword">this</span>.rear] = data;</span><br><span class="line">        <span class="keyword">this</span>.rear = (<span class="keyword">this</span>.rear + <span class="number">1</span>) % element.length;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dilatation</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        T[] old = element;</span><br><span class="line">        element = (T[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.front; i != rear; i = (i + <span class="number">1</span>) % old.length) &#123;</span><br><span class="line">            element[j++] = old[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.rear = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * offer 方法可插入一个元素,这与add 方法不同，</span></span><br><span class="line"><span class="comment">     * 该方法只能通过抛出未经检查的异常使添加元素失败。</span></span><br><span class="line"><span class="comment">     * 而不是出现异常的情况，例如在容量固定（有界）的队列中</span></span><br><span class="line"><span class="comment">     * NullPointerException:data==null时抛出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"The data can't be null"</span>);</span><br><span class="line">        <span class="comment">//队满抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.front == (<span class="keyword">this</span>.rear + <span class="number">1</span>) % <span class="keyword">this</span>.element.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The capacity of SeqQueue has reached its maximum"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加data</span></span><br><span class="line">        element[<span class="keyword">this</span>.rear] = data;</span><br><span class="line">        <span class="comment">//更新rear指向下一个空元素的位置</span></span><br><span class="line">        <span class="keyword">this</span>.rear = (<span class="keyword">this</span>.rear + <span class="number">1</span>) % element.length;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队头元素,不执行删除操作,若队列为空,返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>.element[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回队头元素,不执行删除操作,若队列为空,抛出异常:NoSuchElementException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"The Queue is empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队,执行删除操作,返回队头元素,若队列为空,返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T temp = <span class="keyword">this</span>.element[<span class="keyword">this</span>.front];</span><br><span class="line">        <span class="keyword">this</span>.front = (<span class="keyword">this</span>.front + <span class="number">1</span>) % <span class="keyword">this</span>.element.length;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队,执行删除操作,若队列为空,抛出异常:NoSuchElementException</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"The Queue is empty"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">this</span>.front; i != <span class="keyword">this</span>.rear; i = (i + <span class="number">1</span>) % element.length) &#123;</span><br><span class="line">            element[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//复位</span></span><br><span class="line">        <span class="keyword">this</span>.front = <span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayQuene&lt;String&gt; quene = <span class="keyword">new</span> ArrayQuene&lt;String&gt;();</span><br><span class="line">        quene.add(<span class="string">"a"</span>);</span><br><span class="line">        quene.add(<span class="string">"b"</span>);</span><br><span class="line">        quene.add(<span class="string">"c"</span>);</span><br><span class="line">        quene.poll();</span><br><span class="line">        System.out.println(quene.element());</span><br><span class="line">        <span class="keyword">while</span> (!quene.isEmpty()) &#123;</span><br><span class="line">            String temp = quene.remove();</span><br><span class="line">            System.out.println(temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/%E9%98%9F%E5%88%97/day03_02.png" alt="队列"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java队列&quot;&gt;&lt;a href=&quot;#Java队列&quot; class=&quot;headerlink&quot; title=&quot;Java队列&quot;&gt;&lt;/a&gt;Java队列&lt;/h4&gt;&lt;p&gt;队列的两端都”开口”，要求数据只能从一端进，从另一端出，且数据的进出要遵循 “先进先出” 的原则，即最先进队
      
    
    </summary>
    
      <category term="算法" scheme="https://ooFFiioo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="-队列 -Java" scheme="https://ooFFiioo.github.io/tags/%E9%98%9F%E5%88%97-Java/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题 Day3</title>
    <link href="https://ooFFiioo.github.io/2020/01/04/leetcode%E5%88%B7%E9%A2%98Day3/"/>
    <id>https://ooFFiioo.github.io/2020/01/04/leetcode刷题Day3/</id>
    <published>2020-01-03T16:00:00.000Z</published>
    <updated>2020-01-18T02:08:00.321Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end = <span class="number">0</span>, start = <span class="number">0</span>; end &lt; n; end++) &#123;</span><br><span class="line">            <span class="keyword">char</span> alpha = s.charAt(end);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(alpha)) &#123;</span><br><span class="line">                start = Math.max(map.get(alpha), start);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, end - start + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(end), end + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>.双指针start,end——记录滑动窗口的左右边界。</span><br><span class="line"><span class="number">2</span>.一个Hash表——记录的s中的所有字符(去重)以及每个字符的出现次数。原因：由于s中可能包含重复字符，那么不仅要依次判断窗口子序列是否包含s中某个字符，还要判断该字符出现的次数是否与在s中相同。既然字符本身和出现次数相关联，那么就可以用一对键值对来表示，所以可使用Hash表来保存s中的字符和出现频率。</span><br><span class="line"><span class="number">3</span>.一个计数器ans，记录s中包含的字符数(去重后），即需要判断是否存在于s的字符。</span><br><span class="line"><span class="number">4</span>.令start = <span class="number">0</span>, end = <span class="number">0</span>;移动右边界，每当发现一个字符存在于s中，确定该字符在Hash表中字符位置 ，即&lt;key,value&gt;中value的值，加 <span class="number">1</span> 表示从字符位置后一个才开始不重复。</span><br><span class="line"><span class="number">5</span>.以此类推，不断拓展右边界，直至全部，表示窗口序列中已经至少包含了s中所有字符（包括重复的）</span><br><span class="line"><span class="number">6</span>.分析此时的窗口子序列，s是该序列的子集.如果两者长度相同，即满足条件，那么它的左边界start就是我们想要的结果之一了。但我们不会一直那么幸运，这时就需要收缩窗口的左边界，即end不动，start向右判断该子序列，因此在每一次end后移时判断start是否增加</span><br></pre></td></tr></table></figure><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/03/day03_01.png" alt="图解" style="zoom: 80%;"><h4 id="补充：HashMap中的containsKey-Obj-key"><a href="#补充：HashMap中的containsKey-Obj-key" class="headerlink" title="补充：HashMap中的containsKey(Obj key)"></a>补充：HashMap中的containsKey(Obj key)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span></span>;<span class="comment">//如果此映射包含对于指定键的映射关系，则返回 true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">    * 此Map中键值映射的数量（大小）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * An empty table instance to share when the table is not inflated.</span></span><br><span class="line"><span class="comment">    * 当表的容量不增加时候共享空表的实例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断Map中是否有对应的key</span></span><br><span class="line"><span class="comment">    * 如果可以存在返回true，否则返回false</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回与HashMap中的指定键相关联的条目。 如果HashMap不包含键的映射，则返回null。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Entry&lt;K, V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">            e != <span class="keyword">null</span>;</span><br><span class="line">            e = e.next) &#123;</span><br><span class="line">           Object k;</span><br><span class="line">           <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                   ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> e;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="补充：Math-max-与-Math-min"><a href="#补充：Math-max-与-Math-min" class="headerlink" title="补充：Math.max()与 Math.min()"></a>补充：Math.max()与 Math.min()</h4><blockquote><p>一、byte，占用一个字节，取值范围为 -128-127，默认是“\u0000”，表示空<br>二、short，占用两个字节，取值范围为 -32768-32767<br>三、int，占用四个字节，-2147483648-2147483647<br>四、long，占用八个字节，对 long 型变量赋值时必须加上”L”或“l”,否则不认为是 long 型<br>五、float，占用四个字节，对 float 型进行赋值的时候必须加上“F”或“f”，如果不加，会产生编译错误，因为系统<br>自动将其定义为 double 型变量。double转换为float类型数据会损失精度。float a = 12.23产生编译错误的，float a = 12是正确的<br>六、double，占用八个字节，对 double 型变量赋值的时候最好加上“D”或“d”，但加不加不是硬性规定<br>七、char,占用两个字节，在定义字符型变量时，要用单引号括起来<br>八、boolean，只有两个值“true”和“false”，默认值为false，不能用0或非0来代替，这点和C语言不同</p></blockquote><p>自动类型转换</p><p>1）两种类型是彼此兼容的</p><p>2）转换的目的类型占得空间范围一定要大于转化的源类型</p><p>正向过程：由低字节向高字节自动转换</p><p><strong>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double</strong></p><p>逆向过程：使用强制转换,可能丢失精度。</p><p><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/03/day03_02.png" alt="转换"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Math</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a &gt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a &gt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在有保证的非NaN参数上使用原始的逐位转换。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> negativeZeroFloatBits  = Float.floatToRawIntBits(-<span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> negativeZeroDoubleBits = Double.doubleToRawLongBits(-<span class="number">0.0</span>d);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a != a)</span><br><span class="line">            <span class="keyword">return</span> a;   <span class="comment">// a is NaN</span></span><br><span class="line">        <span class="keyword">if</span> ((a == <span class="number">0.0f</span>) &amp;&amp;</span><br><span class="line">            (b == <span class="number">0.0f</span>) &amp;&amp;</span><br><span class="line">            (Float.floatToRawIntBits(a) == negativeZeroFloatBits)) &#123;</span><br><span class="line">            <span class="comment">// Raw conversion ok since NaN can't map to -0.0.</span></span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (a &gt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a != a)</span><br><span class="line">            <span class="keyword">return</span> a;   <span class="comment">// a is NaN</span></span><br><span class="line">        <span class="keyword">if</span> ((a == <span class="number">0.0</span>d) &amp;&amp;</span><br><span class="line">            (b == <span class="number">0.0</span>d) &amp;&amp;</span><br><span class="line">            (Double.doubleToRawLongBits(a) == negativeZeroDoubleBits)) &#123;</span><br><span class="line">            <span class="comment">// Raw conversion ok since NaN can't map to -0.0.</span></span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (a &gt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a &lt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">min</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (a &lt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">min</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a != a)</span><br><span class="line">            <span class="keyword">return</span> a;   <span class="comment">// a is NaN</span></span><br><span class="line">        <span class="keyword">if</span> ((a == <span class="number">0.0f</span>) &amp;&amp;</span><br><span class="line">            (b == <span class="number">0.0f</span>) &amp;&amp;</span><br><span class="line">            (Float.floatToRawIntBits(b) == negativeZeroFloatBits)) &#123;</span><br><span class="line">            <span class="comment">// Raw conversion ok since NaN can't map to -0.0.</span></span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (a &lt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">min</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a != a)</span><br><span class="line">            <span class="keyword">return</span> a;   <span class="comment">// a is NaN</span></span><br><span class="line">        <span class="keyword">if</span> ((a == <span class="number">0.0</span>d) &amp;&amp;</span><br><span class="line">            (b == <span class="number">0.0</span>d) &amp;&amp;</span><br><span class="line">            (Double.doubleToRawLongBits(b) == negativeZeroDoubleBits)) &#123;</span><br><span class="line">            <span class="comment">// Raw conversion ok since NaN can't map to -0.0.</span></span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (a &lt;= b) ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StrictMath</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StrictMath</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">min</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">min</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">min</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.min(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h4><p>1.版权声明：CSDN博主「wespten」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_35029061/article/details/85828808" target="_blank" rel="noopener">https://blog.csdn.net/qq_35029061/article/details/85828808</a></p><p>2.作者：guanpengchn 链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-jie-suan-fa-3-wu-zhong-fu-zi-fu-de-zui-chang-z/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-jie-suan-fa-3-wu-zhong-fu-zi-fu-de-zui-chang-z/</a> </p><p>来源：力扣（LeetCode） 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h4&gt;&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: “abcabcbb”&lt;br
      
    
    </summary>
    
      <category term="算法" scheme="https://ooFFiioo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="-滑动窗口 -Math.max() -Math.min()" scheme="https://ooFFiioo.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3-Math-max-Math-min/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题 Day2</title>
    <link href="https://ooFFiioo.github.io/2019/12/28/leetcode%E5%88%B7%E9%A2%98Day2/"/>
    <id>https://ooFFiioo.github.io/2019/12/28/leetcode刷题Day2/</id>
    <published>2019-12-27T16:00:00.000Z</published>
    <updated>2020-01-18T02:06:01.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">       ListNode pre=<span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//预先指针</span></span><br><span class="line">       ListNode cur=pre;</span><br><span class="line">       <span class="keyword">int</span> carry=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(l1!=<span class="keyword">null</span>||l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x = l1 == <span class="keyword">null</span> ? <span class="number">0</span> : l1.val;<span class="comment">//注意==的优先级比=高</span></span><br><span class="line">            <span class="keyword">int</span> y = l2 == <span class="keyword">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            <span class="keyword">int</span> sum = x + y + carry;<span class="comment">//sum是某一进位上的数值</span></span><br><span class="line"></span><br><span class="line">            carry=sum/<span class="number">10</span>;<span class="comment">//进位超过10 进1</span></span><br><span class="line">            sum=sum%<span class="number">10</span>;<span class="comment">//不超过10 就为原数</span></span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(sum);<span class="comment">//实际答案</span></span><br><span class="line"><span class="comment">//进入下一位</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="keyword">null</span>)</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="keyword">null</span>)</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>) &#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h3><img src="https://zck-blog-image-1259799801.cos.ap-nanjing.myqcloud.com/images/02/01.jpg" alt="图解" style="zoom:80%;"><blockquote><h3 id="Integer与int的区别："><a href="#Integer与int的区别：" class="headerlink" title="Integer与int的区别："></a>Integer与int的区别：</h3><p>int与integer的区别从大的方面来说就是基本数据类型与其包装类的区别：</p><p>int 是<strong>基本类型，直接存数值</strong>，而integer是<strong>对象，用一个引用指向这个对象</strong></p><p>1.Java 中的数据类型分为基本数据类型和复杂数据类型</p><p>int 是前者而integer 是后者（也就是一个类）；因此在类进行初始化时int类的变量初始为<strong>0</strong>.而Integer的变量则初始化为<strong>null</strong></p><p>2.初始化时：</p><p>　　int i =1；Integer i= new Integer(1);(要把integer 当做一个类看)；但由于有了自动装箱和拆箱　　 (<a href="http://www.cnblogs.com/shenliang123/archive/2012/04/16/2451996.html)，" target="_blank" rel="noopener">http://www.cnblogs.com/shenliang123/archive/2012/04/16/2451996.html)，</a></p><p>　　使得对Integer类也可使用：Integer i= 1；</p><p>3.Java中int和Integer关系是比较微妙的。关系如下：</p><p>　　1.int是基本的数据类型；</p><p>　　2.Integer是int的封装类；</p><p>　　3.int和Integer都可以表示某一个数值；</p><p>　　4.int和Integer不能够互用，因为他们两种不同的数据类型；　　</p></blockquote><h4 id="ArrayList补充"><a href="#ArrayList补充" class="headerlink" title="ArrayList补充:"></a>ArrayList补充:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *项目名: JavaTest</span></span><br><span class="line"><span class="comment"> *文件名: ArrayListTest</span></span><br><span class="line"><span class="comment"> *创建者: ZhangChengkai</span></span><br><span class="line"><span class="comment"> *创建时间:2019/12/28 21:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">5</span>);</span><br><span class="line">        arrayList.add(<span class="number">2</span>);</span><br><span class="line">        System.out.printf(<span class="string">"size=%d\n"</span>, arrayList.size());</span><br><span class="line">        <span class="comment">//遍历方法</span></span><br><span class="line">        <span class="comment">// 第一种：通过迭代器遍历</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = arrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            System.out.print(it.next() + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 第二种：通过索引值遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayList.size(); i++) &#123;</span><br><span class="line">            System.out.print(arrayList.get(i) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 第三种：for循环遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer number : arrayList) &#123;</span><br><span class="line">            System.out.print(number + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 在指定位置添加元素</span></span><br><span class="line">        arrayList.add(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 删除指定位置上的元素</span></span><br><span class="line">        arrayList.remove(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 删除指定元素</span></span><br><span class="line">        arrayList.remove((Object) <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 判断arrayList是否包含5</span></span><br><span class="line">        System.out.println(<span class="string">"ArrayList contains 5 is: "</span> + arrayList.contains(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// toArray用法</span></span><br><span class="line">        <span class="comment">//toArray() 返回的是 Object[] 数组，将 Object[] 转换为其它类型</span></span><br><span class="line">        <span class="comment">// 第一种方式(最常用)</span></span><br><span class="line">        Integer[] integer = arrayList.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]);</span><br><span class="line">        System.out.print(integer[<span class="number">0</span>]);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(integer[<span class="number">0</span>].getClass().getSimpleName());</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">// 第二种方式(容易理解)</span></span><br><span class="line">        Integer[] integer1 = <span class="keyword">new</span> Integer[arrayList.size()];</span><br><span class="line">        arrayList.toArray(integer1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空ArrayList</span></span><br><span class="line">        arrayList.clear();</span><br><span class="line">        <span class="comment">// 判断ArrayList是否为空</span></span><br><span class="line">        System.out.println(<span class="string">"ArrayList is empty: "</span> + arrayList.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h3><p>作者：guanpengchn<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers/solution/hua-jie-suan-fa-2-liang-shu-xiang-jia-by-guanpengc/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers/solution/hua-jie-suan-fa-2-liang-shu-xiang-jia-by-guanpengc/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;p&gt;给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字
      
    
    </summary>
    
      <category term="算法" scheme="https://ooFFiioo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="-leetcode -链表 - Integer与int的区别 - ArrayList" scheme="https://ooFFiioo.github.io/tags/leetcode-%E9%93%BE%E8%A1%A8-Integer%E4%B8%8Eint%E7%9A%84%E5%8C%BA%E5%88%AB-ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题 Day1</title>
    <link href="https://ooFFiioo.github.io/2019/12/26/leetcode%E5%88%B7%E9%A2%98Day1/"/>
    <id>https://ooFFiioo.github.io/2019/12/26/leetcode刷题Day1/</id>
    <published>2019-12-25T16:00:00.000Z</published>
    <updated>2020-01-18T02:03:08.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>Solution1：穷举法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] == target - nums[i]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历所有元素，i取任何值时都要遍历一遍，并判断</p><p>时间复杂度：O(n^2)。</p><p>空间复杂度：O(1)</p><p>Solution2:HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> complement = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(complement) &amp;&amp; map.get(complement) != i) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, map.get(complement) &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一个循环，给nums[i]编号，在第2个循环中，判断是否相同，并排除i</p><p>时间复杂度：O(n)<br>我们把包含有 nn 个元素的列表遍历两次。由于哈希表将查找时间缩短到 O(1) ，所以时间复杂度为 O(n)</p><p>空间复杂度：O(n)<br>所需的额外空间取决于哈希表中存储的元素数量，该表中存储了 nn 个元素。</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>哈希表参考资料</p><p><a href="https://zhuanlan.zhihu.com/p/31610616" target="_blank" rel="noopener">知乎</a></p><p><a href="https://yikun.github.io/2015/04/01/Java-HashMap工作原理及实现/" target="_blank" rel="noopener">某大佬的</a></p><p><a href="https://www.cnblogs.com/skywang12345/p/3310835.html" target="_blank" rel="noopener">大佬x2</a></p><h3 id="JS"><a href="#JS" class="headerlink" title="JS:"></a>JS:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> dif = target - nums[i];</span><br><span class="line">        <span class="comment">// j = i + 1 的目的是减少重复计算和避免两个元素下标相同</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] == dif)</span><br><span class="line">                <span class="keyword">return</span> [i,j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> dif = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(temp[dif] != <span class="literal">undefined</span>)&#123;<span class="comment">//有值</span></span><br><span class="line">            <span class="keyword">return</span> [temp[dif],i];</span><br><span class="line">        &#125;</span><br><span class="line">        temp[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;p&gt;给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。&lt;/p&gt;
      
    
    </summary>
    
      <category term="算法" scheme="https://ooFFiioo.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="-leetcode -哈希表" scheme="https://ooFFiioo.github.io/tags/leetcode-%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>影评：攀登者</title>
    <link href="https://ooFFiioo.github.io/2019/09/29/%E5%BD%B1%E8%AF%84%EF%BC%9A%E6%94%80%E7%99%BB%E8%80%85/"/>
    <id>https://ooFFiioo.github.io/2019/09/29/影评：攀登者/</id>
    <published>2019-09-28T16:00:00.000Z</published>
    <updated>2019-09-29T03:30:11.563Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容包含剧透！！！</p><p>仅个人观点</p><p>  咱们上来什么都不说，我就想问一句，为什么要有这一个彩蛋？？？在曾经的登山训练场向死去的伙伴告别，你是在表达中国登山队曾经辉煌的逝去，还是单纯就让成龙大哥出来露个脸吸点人气？？？截肢的登山者登上山峰的确让人感到敬佩，但是，请导演不要忘记这是10月国庆的电影，难道不应该在大国崛起上再加点料吗？？？</p><p>  下面正文，首先，从剧情分析，一句话，整个故事线符合我对预告片的所有期望，也有预料之外的沙雕剧情。首先，剧情十分紧凑，开头倒序，不到10分钟，直接登顶，吓得我以为电影结束了，拿出手机确认是两个小时场后，才继续坐下。当我看到京哥给章子怡表演猴子上山，准备喊话的时候，我就知道：完了。废旧工厂，隐秘，安静，是男女主之间的精神联系，是两人共同的密码，然后京哥就在上面上蹿下跳？？？wtf，NB。看来今年中美合拍的西游记面子很大（手动滑稽）。</p><p>  后面直接引到二次登山，于是我看到了整部电影最成功的部分，塑造了松林这个人物，不得不说，吴京都被抢戏了，虽然我不知道这位演员的名字，但是我认为他才是最成功的角色，他让我看到了一个人的自我怀疑，又在心结解开后的变化，心理由崩溃到解放的心路历程，这才是整部戏最值得观看的部分。</p><p>  随后就是，高潮部分，登山失败，遇大风。吴京哥哥变身超人，滑梯变跑车，手变精钢绳，徒手绑石头，肩抗大冰柱，吃瓜群众都看傻了，这是什么妖怪？？？我说，毕竟是电影，我们喜欢吴京的硬汉形象，喜欢的是他毅然决然为国征战，不是喜欢看他肉身抗台风，还有离奇的为章子怡抗冰柱，自己像个没事人一样，边上的考察队员像个憨憨一样的形象。</p><p>  至于，李国梁的死其实整个故事都在暗示，从一心谈恋爱的西藏妹妹，联想松林的人物背景，再到他出戏的表现，我知道他不是登山的人就是那个必死的，他就是为剧情服务，为了解开松林的心结而生的人（吐槽一下，你在第二阶梯不准备登顶在那乱拍照，被罐子砸死我是真的不懂，不多说了，只能说不严谨，有点理想化了 ）。</p><p>  最后，总评一下，至多7分，看在吴京等一系列实力派演员的份上，实在是走心了，演技没得说，要是给鹿晗演分分钟整一个《喜马拉雅的爱恋》，拍摄也是十分ok，扣就扣在导演的身上，我看完<a href="https://www.zhihu.com/question/333220171上当当的回答就感觉十分有道理，好好的将国家领土主权，家国情怀，讴歌祖国强大，向下一代中国人展现曾经祖国艰难的影片变成了这个样子，任谁也会失望。" target="_blank" rel="noopener">https://www.zhihu.com/question/333220171上当当的回答就感觉十分有道理，好好的将国家领土主权，家国情怀，讴歌祖国强大，向下一代中国人展现曾经祖国艰难的影片变成了这个样子，任谁也会失望。</a></p><p>  我们希望看见的是代表中国高度的喜马拉雅，不是男女主两人隔得那座绵情小山，ok？</p><p>  下面正文，首先，从剧情分析，一句话，整个故事线符合我对预告片的所有期望，，也有预料之外的沙雕剧情。首先，剧情十分紧凑，开头倒序，不到10分钟，直接登顶，吓得我以为电影结束了，拿出手机确认是两个小时场后，吓得我以为后面转向言情剧了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容包含剧透！！！&lt;/p&gt;
&lt;p&gt;仅个人观点&lt;/p&gt;
&lt;p&gt;  咱们上来什么都不说，我就想问一句，为什么要有这一个彩蛋？？？在曾经的登山训练场向死去的伙伴告别，你是在表达中国登山队曾经辉煌的逝去，还是单纯就让成龙大哥出来露个脸吸点人气？？？截肢的登山者登上山峰的确让人感
      
    
    </summary>
    
      <category term="影评" scheme="https://ooFFiioo.github.io/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="影评" scheme="https://ooFFiioo.github.io/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello，my friend</title>
    <link href="https://ooFFiioo.github.io/2019/08/10/Hello/"/>
    <id>https://ooFFiioo.github.io/2019/08/10/Hello/</id>
    <published>2019-08-09T16:00:00.000Z</published>
    <updated>2019-09-29T03:17:10.190Z</updated>
    
    <content type="html"><![CDATA[<p>你好，朋友</p><p>这是我的第一篇blog，从此以后如果我有空闲时间，将会在这里分享我的心得与知识</p><p>谢谢</p>]]></content>
    
    <summary type="html">
    
      我的第一篇blog
    
    </summary>
    
      <category term="生活" scheme="https://ooFFiioo.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://ooFFiioo.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
